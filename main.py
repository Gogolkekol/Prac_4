# -*- coding: utf-8 -*-
"""python_practice_4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1j5SImzFkJcx8e_51qj9X4Fl23Qrz2MQm

# I. Functions. Arguments.

0. (5б) Назвіть 4 частини, з яких складається визначення функції.
"""

Функція складаєтся :
Function header
Function Body
Docstring
Return Value

"""1. (4б) Визначте функцію, що приймає 2 аргументи та повертає результат ділення 1го аргумента на інший."""

def divide_numbers(a, b):

    if b != 0:  # перевірка на ділення на нуль, щоб уникнути помилки
        result = a / b
        return result
    else:
        print("Помилка: Ділення на нуль неможливе.")

result = divide_numbers(10, 2)
print("Результат ділення: ", result)

"""2. (2б) Викличте вище визначену функцію, де другий аргумент дорівнює 0."""

result = divide_numbers(10, 0)

"""3. (6б) Перевизначте функцію так, щоби у випадку ділення на 0 функція повертала None, а в решті випадків - результат розрахунків."""

def number(a, b):
    if b != 0:
        result = a / b
        return result
    else:
        print("Помилка: Ділення на нуль неможливе.")
        return None
result = number(10, 2)
print("Результат ділення: ", result)

result = number(10, 0)
print("Результат ділення з 0 як дільник: ", result)

"""4. (5б) Напишіть документацію (docstring) у форматі Google до функції, що має обчислювати суму двох чисел."""

def calculate_sum(num1, num2):
    result = num1 + num2
    return result

"""5. (4б) Реалізуйте цю функцію (із додаванням docstring у визначення функції)."""

def calculate_sum(num1, num2):
    result = num1 + num2
    return result

result = calculate_sum(5, 3.5)
print("Результат додавання: ", result)

"""6. (6б) Визначте функцію, що віднімає одне число від іншого (підказка: це буде 2 аргументи функції). При чому, якщо не визначити, скільки саме має бути віднято від числа, за замовчуванням має відніматися 1. Викличте функцію, передаючи тільки один аргумент."""

def subtract_numbers(num1, num2=1):
    result = num1 - num2
    return result

result = subtract_numbers(10)
print("Результат віднімання: ", result)

"""7. (10б) Визначте функцію, яка приймає iterable (ітерабельний обʼєкт, напр. список), що складається з 7ми рядкових значень - назв погодних умов (напр. "sunny") за кожен день у тижні. Повертає функція словник, де ключами є рядки з погодними умовами, а значеннями - кількість разів, скільки дана погода була протягом тижня (напр. {'sunny': 1, ...})."""

def count_weather_occurrences(weather_list):
    weather_count = {}

    for weather_condition in weather_list:
        weather_count[weather_condition] = weather_count.get(weather_condition, 0) + 1

    return weather_count

# Приклад виклику функції
weekly_weather = ['sunny', 'rainy', 'sunny', 'cloudy', 'rainy', 'sunny', 'cloudy']
weather_statistics = count_weather_occurrences(weekly_weather)
print(weather_statistics)

"""8. (3б) Викличте цю функцію тричі з різними аргументами та виведіть результати на екран."""



"""9. (15б) Напишіть програму, яка б шукала необхідне число у **впорядкованому** списку цілочислених значень, де


1.   число має вводитись з консолі.
2.   власне алгоритм пошуку винесений в окрему функцію, яка повертає булеве значення (знайдено число - True, не знайдено - False).
3. в залежності від результату функції, виведіть на екран повідомлення про успішний або ж неуспішний пошук.


**Зауваження**: використовувати оператор **in** заборонено.
"""

weekly_weather1 = ['sunny', 'rainy', 'sunny', 'cloudy', 'rainy', 'sunny', 'cloudy']
weather_statistics1 = count_weather_occurrences(weekly_weather1)
print("Результат 1:", weather_statistics1)

weekly_weather2 = ['rainy', 'cloudy', 'rainy', 'sunny', 'sunny', 'cloudy', 'sunny']
weather_statistics2 = count_weather_occurrences(weekly_weather2)
print("Результат 2:", weather_statistics2)

weekly_weather3 = ['cloudy', 'sunny', 'cloudy', 'rainy', 'cloudy', 'sunny', 'sunny']
weather_statistics3 = count_weather_occurrences(weekly_weather3)
print("Результат 3:", weather_statistics3)

"""# II. Lambda functions.

10. (6б) Визначте анонімну функцію, що виконувала б завдання з задачі №1.
"""

calculate = lambda num1, num2: num1 + num2
result = calculate(5, 3)
print("Результат додавання:", result)

"""11. (5б) В яких випадках варто використовувати лямбда-функції?

*місце для відповіді

12. (9б) Визначте список з рядками. Після цього визначте анонімну функцію для отримання першого символу у верхньому регістрі для кожного рядка списку.
*Підказка*: використовуйте анонімну функцію в якості агрумента до вбудованої ф-ції, яка створена для застосування функцій над iterable обʼєктами.
Результат виведіть на екран у вигляді кортежу.
"""



"""# III. Decorators.

13. (15б) Визначте декоратор, який би виводив у консоль повідомлення про початок роботи і назву функції, а після відпрацювання функції - повідомлення про закінчення роботи і назву функції, що задекорована.
"""

def my_decorator(func):
    def wrapper(*args, **kwargs):
        print(f"Початок роботи функції {func.__name__}")
        result = func(*args, **kwargs)
        print(f"Закінчення роботи функції {func.__name__}")
        return result
    return wrapper

@my_decorator
def example_function():
    print("Це приклад функції.")

example_function()

"""14. (7б) Задекоруйте функції з завдання 3, 5 та 6 декоратором із завдання 13. *Примітка*: продемонструйте 2 способи, як можна задекорувати функції (**УВАГА**: не декоруйте функції двічі!)."""



"""15. (2б) Викличте одну з задекорованих функцій і виведіть її результат на екран."""



"""# Вітаю! Ви велика(ий) молодець, що впоралась(вся). Похваліть себе та побалуйте чимось приємним. Я Вами пишаюся."""